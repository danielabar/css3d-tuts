body{
  font-family: Helvetica, Arial, "Lucida Grande", sans-serif;
}

#viewport {
  width: 200px;
  height: 200px;
  position: absolute;
  top: 50%;
  left: 50%;
  margin: -100px 0 0 -100px;
  -webkit-perspective: 1000px;
          perspective: 1000px;
}

/* We don't really need a transformation here, but transform and transform-style should go together */
#cube {
  width: 100%;
  height: 100%;
  -webkit-transform: rotateX(0deg) rotateY(0deg);
          transform: rotateX(0deg) rotateY(0deg);
  -webkit-transform-style: preserve-3d;
          transform-style: preserve-3d;
  position: relative;
}

.face {
  width: 100%;
  height: 100%;
  position: absolute;  /* so that the faces can stack up on top of each other */
}

#front {
  background: #7a2ad9;
  -webkit-transform: translateZ(100px);
          transform: translateZ(100px);
}

/* Rotate Y by 180 to "flip it over" so the text reads properly */
#back {
  background: #7a2ad9;
  -webkit-transform: translateZ(-100px) rotateY(-180deg);
          transform: translateZ(-100px) rotateY(-180deg);
}

#top {
  background: #2ad97a;
  -webkit-transform: translateY(-100px) rotateX(90deg);
          transform: translateY(-100px) rotateX(90deg);
}

/* Negative X rotation to make it face "outwards" so the text reads properly */
#bottom {
  background: #2ad97a;
  -webkit-transform: translateY(100px) rotateX(-90deg);
          transform: translateY(100px) rotateX(-90deg);
}

/* Negative Y rotation to make it face "outwards" so the text reads properly */
#left {
  background: #d97a2a;
  -webkit-transform: translateX(-100px) rotateY(-90deg);
          transform: translateX(-100px) rotateY(-90deg);
}

#right {
  background: #d97a2a;
  -webkit-transform: translateX(100px) rotateY(90deg);
          transform: translateX(100px) rotateY(90deg);
}

/* Only apply the animation when user hovers over teh animate link */
#anim:hover + #viewport > #cube {
  -webkit-animation: RotateCrazy 3s infinite alternate;
          animation: RotateCrazy 3s infinite alternate;
}

@-webkit-keyframes Rotate {
  0% { -webkit-transform: rotateY(0deg); transform: rotateY(0deg); }
  20% { -webkit-transform: rotateY(30deg); transform: rotateY(30deg); }
  70% { -webkit-transform: rotateY(210deg); transform: rotateY(210deg); }
  100% { -webkit-transform: rotateY(360deg); transform: rotateY(360deg); }
}

@keyframes Rotate {
  0% { -webkit-transform: rotateY(0deg); transform: rotateY(0deg); }
  20% { -webkit-transform: rotateY(30deg); transform: rotateY(30deg); }
  70% { -webkit-transform: rotateY(210deg); transform: rotateY(210deg); }
  100% { -webkit-transform: rotateY(360deg); transform: rotateY(360deg); }
}

@-webkit-keyframes RotateCrazy {
  0% { -webkit-transform: rotateY(0deg); transform: rotateY(0deg); }
  20% { -webkit-transform: rotateY(30deg) rotateX(50deg); transform: rotateY(30deg) rotateX(50deg); }
  70% { -webkit-transform: rotateY(210deg) rotateZ(120deg); transform: rotateY(210deg) rotateZ(120deg); }
  100% { -webkit-transform: rotateY(360deg); transform: rotateY(360deg); }
}

@keyframes RotateCrazy {
  0% { -webkit-transform: rotateY(0deg); transform: rotateY(0deg); }
  20% { -webkit-transform: rotateY(30deg) rotateX(50deg); transform: rotateY(30deg) rotateX(50deg); }
  70% { -webkit-transform: rotateY(210deg) rotateZ(120deg); transform: rotateY(210deg) rotateZ(120deg); }
  100% { -webkit-transform: rotateY(360deg); transform: rotateY(360deg); }
}
